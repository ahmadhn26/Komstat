"function(data, type, row, meta) {",
"  return type === 'display' && data != null ? data : '';",
"}"
)))),
extensions = 'Buttons',
class = 'cell-border stripe')
})
output$data_table <- DT::renderDataTable({
DT::datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
columnDefs = list(list(targets = "_all", render = DT::JS(
"function(data, type, row, meta) {",
"  return type === 'display' && data != null ? data : '';",
"}"
)))),
extensions = 'Buttons',
class = 'cell-border stripe')
})
# Download data
output$download_data <- downloadHandler(
filename = function() {
paste("climate_data_", Sys.Date(), ".xlsx", sep="")
},
content = function(file) {
write_xlsx(filtered_data(), file)
}
)
# Descriptive statistics
desc_stats <- eventReactive(input$calc_desc, {
validate(
need(length(input$var_desc) > 0, "Please select at least one variable.")
)
dat <- filtered_data()[, input$var_desc, drop = FALSE]
validate(
need(nrow(na.omit(dat)) > 0, "No valid data for the selected variables.")
)
list(
Mean = colMeans(dat, na.rm = TRUE),
Median = apply(dat, 2, median, na.rm = TRUE),
SD = apply(dat, 2, sd, na.rm = TRUE),
Variance = apply(dat, 2, var, na.rm = TRUE),
Summary = summary(dat)
)
})
output$desc_stats <- renderPrint({
desc_stats()
})
# Correlation heatmap
output$heatmap <- renderPlot({
req(input$calc_desc)
dat <- filtered_data()
validate(
need(length(input$var_desc) > 1, "Please select at least two variables for correlation.")
)
cor_matrix <- cor(na.omit(dat[, input$var_desc, drop = FALSE]), use = "complete.obs")
ggplot(melt(cor_matrix), aes(Var1, Var2, fill = value)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_gradient2(low = "#3498db", high = "#e74c3c", mid = "white", midpoint = 0,
name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
labs(title = "Correlation Heatmap", x = "", y = "") +
geom_text(aes(label = round(value, 2)), color = "black", size = 3)
})
# Dynamic UI for inferential statistics
output$test_ui <- renderUI({
if (input$test_type == "Uji Normalitas") {
pickerInput("norm_var", "Select Variable:",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm"))
} else if (input$test_type == "Uji Hipotesis") {
tagList(
pickerInput("hyp_test", "Test Type:",
choices = c("One Sample T-Test", "Two Sample T-Test", "Paired T-Test"),
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
conditionalPanel(
condition = "input.hyp_test == 'One Sample T-Test'",
pickerInput("one_sample_var", "Select Variable:",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
numericInput("hyp_value", "Hypothesized Mean (mu):", value = 0, step = 0.1),
numericInput("alpha", "Significance Level (alpha):", value = 0.05, min = 0.01, max = 0.1, step = 0.01),
radioButtons("tail_type", "Tail Type:",
choices = c("Two-tailed" = "two.sided", "One-tailed (lower)" = "less", "One-tailed (upper)" = "greater"),
selected = "two.sided")
),
conditionalPanel(
condition = "input.hyp_test == 'Two Sample T-Test'",
pickerInput("hyp_var1", "First Variable:",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
pickerInput("hyp_var2", "Second Variable:",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
numericInput("alpha_two", "Significance Level (alpha):", value = 0.05, min = 0.01, max = 0.1, step = 0.01),
radioButtons("tail_type_two", "Tail Type:",
choices = c("Two-tailed" = "two.sided", "One-tailed (lower)" = "less", "One-tailed (upper)" = "greater"),
selected = "two.sided")
),
conditionalPanel(
condition = "input.hyp_test == 'Paired T-Test'",
pickerInput("paired_var1", "First Paired Variable:",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
pickerInput("paired_var2", "Second Paired Variable:",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
numericInput("alpha_paired", "Significance Level (alpha):", value = 0.05, min = 0.01, max = 0.1, step = 0.01),
radioButtons("tail_type_paired", "Tail Type:",
choices = c("Two-tailed" = "two.sided", "One-tailed (lower)" = "less", "One-tailed (upper)" = "greater"),
selected = "two.sided")
)
)
} else if (input$test_type == "Regresi") {
tagList(
radioGroupButtons("regresi_jenis", "Regression Type:",
choices = c("Simple Linear" = "sederhana",
"Multiple Linear" = "berganda"),
status = "primary", size = "sm"),
br(),
pickerInput("regresi_y", "Y Variable (Response):",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
uiOutput("regresi_x_ui"),
materialSwitch("show_diagnostic", "Show Diagnostic Plots",
status = "primary", value = FALSE)
)
} else if (input$test_type == "ANOVA") {
tagList(
pickerInput("anova_dep", "Dependent Variable:",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
pickerInput("anova_factor1", "First Factor:",
choices = names(rv$data)[sapply(rv$data, is.factor) | sapply(rv$data, is.character)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
conditionalPanel(
condition = "input.anova_type == 'Two-Way ANOVA'",
pickerInput("anova_factor2", "Second Factor:",
choices = names(rv$data)[sapply(rv$data, is.factor) | sapply(rv$data, is.character)],
options = pickerOptions(style = "btn-outline-primary", size = "sm"))
),
pickerInput("anova_type", "ANOVA Type:",
choices = c("One-Way ANOVA", "Two-Way ANOVA", "Tukey Test"),
options = pickerOptions(style = "btn-outline-primary", size = "sm"))
)
} else if (input$test_type == "Uji Kesamaan Ragam") {
tagList(
pickerInput("var_numeric", "Select Numeric Variable:",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
pickerInput("var_group", "Select Grouping Variable:",
choices = names(rv$data)[sapply(rv$data, is.factor) | sapply(rv$data, is.character)],
options = pickerOptions(style = "btn-outline-primary", size = "sm")),
pickerInput("var_test", "Test Type:",
choices = c("Bartlett", "Levene"),
options = pickerOptions(style = "btn-outline-primary", size = "sm"))
)
}
})
# Dynamic UI for regression X variables
output$regresi_x_ui <- renderUI({
if (input$regresi_jenis == "sederhana") {
pickerInput("regresi_x", "X Variable (Predictor):",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
options = pickerOptions(style = "btn-outline-primary", size = "sm"))
} else {
pickerInput("regresi_x", "X Variables (Predictors):",
choices = names(rv$data)[sapply(rv$data, is.numeric)],
multiple = TRUE,
options = pickerOptions(style = "btn-outline-primary", size = "sm"))
}
})
# Inferential statistics
test_result <- eventReactive(input$calc_inf, {
validate(
need(input$test_type, "Please select a test type first.")
)
withProgress(message = 'Running Test...', value = 0.5, {
dat <- filtered_data()
validate(
need(nrow(na.omit(dat)) > 0, "No valid data for analysis.")
)
if (input$test_type == "Uji Normalitas") {
validate(
need(input$norm_var, "Please select a variable for normality test."),
need(input$norm_var %in% colnames(dat), "Variable not found in data.")
)
var <- dat[[input$norm_var]]
validate(
need(sum(!is.na(var)) > 3, "Not enough data for normality test (minimum 4 valid observations).")
)
list(
Shapiro_Wilk = shapiro.test(var[!is.na(var)]),
Liliefors = lillie.test(var[!is.na(var)])
)
} else if (input$test_type == "Uji Hipotesis") {
validate(
need(input$hyp_test, "Please select a hypothesis test type.")
)
if (input$hyp_test == "One Sample T-Test") {
validate(
need(input$one_sample_var, "Please select a variable for one-sample t-test."),
need(input$one_sample_var %in% colnames(dat), "Selected variable not found in data."),
need(sum(!is.na(dat[[input$one_sample_var]])) > 1, "Not enough data for t-test."),
need(!is.null(input$hyp_value), "Please specify a hypothesized mean."),
need(!is.null(input$alpha), "Please specify a significance level.")
)
var <- dat[[input$one_sample_var]]
t.test(var[!is.na(var)], mu = input$hyp_value, alternative = input$tail_type, conf.level = 1 - input$alpha)
} else if (input$hyp_test == "Two Sample T-Test") {
validate(
need(input$hyp_var1, "Please select the first variable."),
need(input$hyp_var2, "Please select the second variable."),
need(input$hyp_var1 %in% colnames(dat), "First variable not found in data."),
need(input$hyp_var2 %in% colnames(dat), "Second variable not found in data."),
need(sum(!is.na(dat[[input$hyp_var1]])) > 1, "Not enough data for first variable."),
need(sum(!is.na(dat[[input$hyp_var2]])) > 1, "Not enough data for second variable."),
need(!is.null(input$alpha_two), "Please specify a significance level.")
)
t.test(dat[[input$hyp_var1]], dat[[input$hyp_var2]], paired = FALSE, alternative = input$tail_type_two, conf.level = 1 - input$alpha_two)
} else if (input$hyp_test == "Paired T-Test") {
validate(
need(input$paired_var1, "Please select the first paired variable."),
need(input$paired_var2, "Please select the second paired variable."),
need(input$paired_var1 %in% colnames(dat), "First paired variable not found in data."),
need(input$paired_var2 %in% colnames(dat), "Second paired variable not found in data."),
need(length(na.omit(dat[[input$paired_var1]])) == length(na.omit(dat[[input$paired_var2]])), "Paired variables must have equal length."),
need(sum(!is.na(dat[[input$paired_var1]])) > 1, "Not enough data for paired test."),
need(!is.null(input$alpha_paired), "Please specify a significance level.")
)
t.test(dat[[input$paired_var1]], dat[[input$paired_var2]], paired = TRUE, alternative = input$tail_type_paired, conf.level = 1 - input$alpha_paired)
}
} else if (input$test_type == "Regresi") {
validate(
need(input$regresi_y, "Please select a Y variable."),
need(input$regresi_y %in% colnames(dat), "Y variable not found."),
need(input$regresi_x, "Please select X variable(s)."),
need(all(input$regresi_x %in% colnames(dat)), "One or more X variables not found.")
)
dat <- na.omit(dat[, c(input$regresi_y, input$regresi_x)])
validate(
need(nrow(dat) > length(input$regresi_x) + 1, "Not enough data for regression.")
)
if (input$regresi_jenis == "sederhana") {
model <- lm(as.formula(paste(input$regresi_y, "~", input$regresi_x)), data = dat)
} else {
model <- lm(as.formula(paste(input$regresi_y, "~", paste(input$regresi_x, collapse = "+"))), data = dat)
}
list(
Summary = summary(model),
VIF = if (input$regresi_jenis == "berganda") car::vif(model) else NULL
)
} else if (input$test_type == "ANOVA") {
validate(
need(input$anova_dep, "Please select a dependent variable."),
need(input$anova_factor1, "Please select a first factor."),
need(input$anova_dep %in% colnames(dat), "Dependent variable not found."),
need(input$anova_factor1 %in% colnames(dat), "First factor not found.")
)
if (input$anova_type == "One-Way ANOVA") {
model <- aov(as.formula(paste(input$anova_dep, "~", input$anova_factor1)), data = dat)
summary(model)
} else if (input$anova_type == "Two-Way ANOVA") {
validate(
need(input$anova_factor2, "Please select a second factor for Two-Way ANOVA."),
need(input$anova_factor2 %in% colnames(dat), "Second factor not found.")
)
model <- aov(as.formula(paste(input$anova_dep, "~", input$anova_factor1, "*", input$anova_factor2)), data = dat)
summary(model)
} else {
model <- aov(as.formula(paste(input$anova_dep, "~", input$anova_factor1)), data = dat)
TukeyHSD(model)
}
} else if (input$test_type == "Uji Kesamaan Ragam") {
validate(
need(input$var_numeric, "Please select a numeric variable."),
need(input$var_group, "Select a grouping variable."),
need(input$var_numeric %in% colnames(dat), "Numeric variable not found in data."),
need(input$var_group %in% colnames(dat), "Grouping variable not found in data."),
need(is.numeric(dat[[input$var_numeric]]), "Selected numeric variable is not numeric."),
need(is.factor(dat[[input$var_group]]) || is.character(dat[[input$var_group]]), "Grouping variable must be categorical."),
need(length(unique(dat[[input$var_group]])) > 1, "Grouping variable must have multiple levels.")
)
dat[[input$var_group]] <- as.factor(dat[[input$var_group]])
if (input$var_test == "Bartlett") {
bartlett.test(as.formula(paste(input$var_numeric, "~", input$var_group)), data = dat)
} else {
leveneTest(as.formula(paste(input$var_numeric, "~", input$var_group)), data = dat)
}
} else {
"Please select a test to view results."
}
})
})
output$test_result <- renderPrint({
test_result()
})
# Automatic interpretation
output$test_interpretation <- renderPrint({
req(input$calc_inf)
result <- test_result()
if (is.null(result) || length(result) == 0) {
return("No test results available for interpretation.")
}
tryCatch({
if (input$test_type == "Uji Normalitas") {
validate(
need(!is.null(result$Shapiro_Wilk), "Shapiro-Wilk test results not available"),
need(!is.null(result$Shapiro_Wilk$p.value), "P-value not available in Shapiro-Wilk test")
)
p_val <- result$Shapiro_Wilk$p.value
alpha <- 0.05  # Default alpha for normality test
if (is.na(p_val)) {
"Could not calculate p-value for normality test."
} else if (p_val < alpha) {
paste("Interpretation: Data is not normally distributed (p-value =", format.pval(p_val, digits = 3), "<", alpha, ").")
} else {
paste("Interpretation: Data is normally distributed (p-value =", format.pval(p_val, digits = 3), ">=", alpha, ").")
}
} else if (input$test_type == "Uji Hipotesis") {
validate(
need(!is.null(result$p.value), "P-value not available in test results")
)
p_val <- result$p.value
alpha <- if (input$hyp_test == "One Sample T-Test") input$alpha else if (input$hyp_test == "Two Sample T-Test") input$alpha_two else input$alpha_paired
if (is.na(p_val)) {
"Could not calculate p-value for hypothesis test."
} else if (p_val < alpha) {
paste("Interpretation: Reject the null hypothesis (p-value =", format.pval(p_val, digits = 3), "<", alpha, ").")
} else {
paste("Interpretation: Fail to reject the null hypothesis (p-value =", format.pval(p_val, digits = 3), ">=", alpha, ").")
}
} else if (input$test_type == "Regresi") {
validate(
need(!is.null(result$Summary), "Regression summary not available"),
need(!is.null(result$Summary$coefficients), "Coefficients table not available")
)
coef_table <- result$Summary$coefficients
if (nrow(coef_table) < 2) {
"Not enough coefficients for regression interpretation."
} else {
p_val <- coef_table[2, 4]  # p-value for the first predictor
alpha <- 0.05  # Default alpha for regression
if (is.na(p_val)) {
"Could not calculate p-value for regression coefficient."
} else if (p_val < alpha) {
paste("Interpretation: There is a significant relationship between predictor(s) and response (p-value =", format.pval(p_val, digits = 3), "<", alpha, ").")
} else {
paste("Interpretation: There is no significant relationship between predictor(s) and response (p-value =", format.pval(p_val, digits = 3), ">=", alpha, ").")
}
}
} else if (input$test_type == "ANOVA") {
validate(
need(!is.null(result[[1]]), "ANOVA table not available"),
need(!is.null(result[[1]]$'Pr(>F)'), "P-values not available in ANOVA table")
)
anova_table <- result[[1]]
p_val <- anova_table$'Pr(>F)'[1]  # p-value for main effect
alpha <- 0.05  # Default alpha for ANOVA
if (is.na(p_val)) {
"Could not calculate p-value for ANOVA test."
} else if (p_val < alpha) {
paste("Interpretation: There is a significant difference between groups (p-value =", format.pval(p_val, digits = 3), "<", alpha, ").")
} else {
paste("Interpretation: There is no significant difference between groups (p-value =", format.pval(p_val, digits = 3), ">=", alpha, ").")
}
} else if (input$test_type == "Uji Kesamaan Ragam") {
validate(
need(!is.null(result), "Test results are empty")
)
p_val <- if (!is.null(result$p.value)) result$p.value else result$`Pr(>F)`[1]
validate(
need(!is.na(p_val), "Could not extract p-value from test results")
)
alpha <- 0.05  # Default alpha for variance test
if (p_val < alpha) {
paste("Interpretation: There is a significant difference in variances (p-value =", format.pval(p_val, digits = 3), "<", alpha, ").")
} else {
paste("Interpretation: There is no significant difference in variances (p-value =", format.pval(p_val, digits = 3), ">=", alpha, ").")
}
} else {
"No interpretation available for the selected test type."
}
}, error = function(e) {
paste("Error in generating interpretation:", e$message)
})
})
# Test plot
output$test_plot <- renderPlot({
req(input$calc_inf)
dat <- filtered_data()
validate(
need(!is.null(dat), "No data available for plotting."),
need(nrow(na.omit(dat)) > 0, "No valid data available after removing NA values.")
)
tryCatch({
if (input$test_type == "Regresi" && isTRUE(input$show_diagnostic)) {
validate(
need(input$regresi_y, "Please select a Y variable for regression."),
need(input$regresi_x, "Please select X variable(s) for regression."),
need(all(c(input$regresi_y, input$regresi_x) %in% colnames(dat)), "Selected variables not found in data.")
)
plot_dat <- na.omit(dat[, c(input$regresi_y, input$regresi_x), drop = FALSE])
validate(
need(nrow(plot_dat) > length(input$regresi_x) + 1, "Not enough observations for regression diagnostics.")
)
formula <- if (input$regresi_jenis == "sederhana") {
as.formula(paste(input$regresi_y, "~", input$regresi_x))
} else {
as.formula(paste(input$regresi_y, "~", paste(input$regresi_x, collapse = "+")))
}
model <- lm(formula, data = plot_dat)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0), mar = c(4, 4, 2, 1), bg = "#f8f9fa",
col.axis = "#2c3e50", col.lab = "#2c3e50", fg = "#3498db")
plot(model, which = 1:4, caption = "", pch = 16, cex = 1.2, col = "#3498db", id.n = 0,
main = c("Residuals vs Fitted", "Normal Q-Q Plot", "Scale-Location", "Residuals vs Leverage"),
cex.main = 1.1)
abline(h = 0, col = "#e74c3c", lwd = 2)
title(paste("Regression Diagnostic Plots for", input$regresi_y, "~",
ifelse(input$regresi_jenis == "sederhana", input$regresi_x, paste(input$regresi_x, collapse = "+"))),
outer = TRUE, cex.main = 1.3, col.main = "#2c3e50")
} else if (input$test_type == "ANOVA" && input$anova_type != "Tukey Test") {
validate(
need(input$anova_dep %in% colnames(dat), "Dependent variable not found."),
need(input$anova_factor1 %in% colnames(dat), "First factor not found."),
need(length(unique(dat[[input$anova_factor1]])) > 1, "First factor must have multiple levels.")
)
par(mfrow = c(1, 2), oma = c(0, 0, 2, 0), bg = "#f8f9fa", col.axis = "#2c3e50", col.lab = "#2c3e50")
boxplot(as.formula(paste(input$anova_dep, "~", input$anova_factor1)), data = dat, col = "#3498db", border = "#2c3e50",
main = paste("Boxplot by", input$anova_factor1), xlab = input$anova_factor1, ylab = input$anova_dep, cex.main = 1.1)
model <- aov(as.formula(paste(input$anova_dep, "~", input$anova_factor1)), data = dat)
plot(fitted(model), residuals(model), pch = 16, col = "#3498db",
main = "Residuals vs Fitted", xlab = "Fitted Values", ylab = "Residuals", cex.main = 1.1)
abline(h = 0, col = "#e74c3c", lwd = 2)
title("ANOVA Diagnostic Plots", outer = TRUE, cex.main = 1.3, col.main = "#2c3e50")
}
}, error = function(e) {
par(mar = c(1, 1, 1, 1), bg = "#f8f9fa")
plot(1, 1, type = "n", axes = FALSE, xlab = "", ylab = "")
text(1, 1, paste("Error generating plot:\n", e$message), col = "#e74c3c", cex = 1.2)
box(col = "#3498db")
})
})
# Main plot for Visualizations tab
output$main_plot <- renderPlotly({
req(input$show_plot)
dat <- filtered_data()
validate(
need(!is.null(dat), "No data available for plotting."),
need(nrow(na.omit(dat)) > 0, "No valid data available after removing NA values.")
)
tryCatch({
if (input$plot_type == "Scatter") {
validate(
need(input$var_x %in% colnames(dat), "X variable not found in data."),
need(input$var_y %in% colnames(dat), "Y variable not found in data.")
)
p <- ggplot(na.omit(dat), aes_string(x = input$var_x, y = input$var_y)) +
geom_point(color = "#3498db", size = 2) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
if (input$show_regression) {
p <- p + geom_smooth(method = "lm", se = FALSE, color = "#e74c3c")
}
ggplotly(p)
} else if (input$plot_type == "Box") {
validate(
need(input$var_y %in% colnames(dat), "Y variable not found in data."),
need(any(sapply(dat, is.factor) | sapply(dat, is.character)), "No categorical variable available for grouping.")
)
x_var <- names(dat)[sapply(dat, is.factor) | sapply(dat, is.character)][1]
p <- ggplot(dat, aes_string(x = x_var, y = input$var_y)) +
geom_boxplot(fill = "#3498db", color = "#2c3e50") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
labs(title = paste("Box Plot by", x_var))
ggplotly(p)
} else if (input$plot_type == "Histogram") {
validate(
need(input$var_y %in% colnames(dat), "Y variable not found in data.")
)
p <- ggplot(na.omit(dat), aes_string(x = input$var_y)) +
geom_histogram(bins = 30, fill = "#3498db", color = "#2c3e50") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
labs(title = "Histogram")
ggplotly(p)
} else if (input$plot_type == "QQ Plot") {
validate(
need(input$var_y %in% colnames(dat), "Y variable not found in data.")
)
p <- ggplot(na.omit(dat), aes(sample = .data[[input$var_y]])) +
stat_qq(color = "#3498db") +
stat_qq_line(color = "#e74c3c") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
labs(title = "QQ Plot")
ggplotly(p)
}
}, error = function(e) {
plot_ly() %>% layout(title = list(text = paste("Error generating plot:", e$message),
font = list(color = "#e74c3c")))
})
})
}
# Run the app
shinyApp(ui, server)
rsconnect::deployApp("C:/MyShinyApp")
